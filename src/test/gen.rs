use rand::Rng;
// gen skywalking binary data
pub fn _gen_data_binary() -> String {
    let mut rng = rand::thread_rng();
    let mut s = _DATA_BINARY.to_string();
    s.replace_range(2000.., "");

    let step = 10;

    let mut idx: usize = rng.gen_range(0..step);
    loop {
        if idx > s.len() {
            break;
        }
        let rand_idx: usize = rng.gen_range(0..25);
        let c: char = (('a' as u8) + 25) as char;
        s.replace_range(rand_idx..rand_idx + 1, &c.to_string());
        idx += step;
    }
    s
}

pub fn _gen_tag(len: u32, range: u32, start_c: char) -> String {
    let mut rng = rand::thread_rng();
    let mut s = String::new();
    for _ in 0..len {
        let rand_idx = rng.gen_range(0..range);
        let c = ((start_c as u8) + rand_idx as u8) as char;
        s.push(c);
    }
    s
}

const _DATA_BINARY: &str = "";
